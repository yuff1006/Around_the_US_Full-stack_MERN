{"ast":null,"code":"const BASE_URL = \"https://register.nomoreparties.co\";\n\nconst checkServerResponse = res => {\n  return res.ok ? res.json() : Promise.reject(`Error: ${res.status}`);\n};\n\nconst login = _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkServerResponse);\n};\n\nconst signup = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkServerResponse);\n};\n\nconst verifyJWT = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${jwt}`\n    }\n  }).then(checkServerResponse);\n};\n\nexport { login, signup, verifyJWT };","map":{"version":3,"names":["BASE_URL","checkServerResponse","res","ok","json","Promise","reject","status","login","email","password","fetch","method","headers","body","JSON","stringify","then","signup","verifyJWT","jwt","Authorization"],"sources":["/Users/yuffiehu/Documents/Coding/Practicum/react-around-auth/src/utils/auth.js"],"sourcesContent":["const BASE_URL = \"https://register.nomoreparties.co\";\n\nconst checkServerResponse = (res) => {\n  return res.ok ? res.json() : Promise.reject(`Error: ${res.status}`);\n};\nconst login = ({ email, password }) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  }).then(checkServerResponse);\n};\n\nconst signup = ({ email, password }) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  }).then(checkServerResponse);\n};\n\nconst verifyJWT = (jwt) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${jwt}`,\n    },\n  }).then(checkServerResponse);\n};\n\nexport { login, signup, verifyJWT };\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,mCAAjB;;AAEA,MAAMC,mBAAmB,GAAIC,GAAD,IAAS;EACnC,OAAOA,GAAG,CAACC,EAAJ,GAASD,GAAG,CAACE,IAAJ,EAAT,GAAsBC,OAAO,CAACC,MAAR,CAAgB,UAASJ,GAAG,CAACK,MAAO,EAApC,CAA7B;AACD,CAFD;;AAGA,MAAMC,KAAK,GAAG,QAAyB;EAAA,IAAxB;IAAEC,KAAF;IAASC;EAAT,CAAwB;EACrC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAb,EAAuB;IACjCY,MAAM,EAAE,MADyB;IAEjCC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFwB;IAKjCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEP,KAAF;MAASC;IAAT,CAAf;EAL2B,CAAvB,CAAL,CAMJO,IANI,CAMChB,mBAND,CAAP;AAOD,CARD;;AAUA,MAAMiB,MAAM,GAAG,SAAyB;EAAA,IAAxB;IAAET,KAAF;IAASC;EAAT,CAAwB;EACtC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAb,EAAuB;IACjCY,MAAM,EAAE,MADyB;IAEjCC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFwB;IAKjCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEP,KAAF;MAASC;IAAT,CAAf;EAL2B,CAAvB,CAAL,CAMJO,IANI,CAMChB,mBAND,CAAP;AAOD,CARD;;AAUA,MAAMkB,SAAS,GAAIC,GAAD,IAAS;EACzB,OAAOT,KAAK,CAAE,GAAEX,QAAS,WAAb,EAAyB;IACnCY,MAAM,EAAE,KAD2B;IAEnCC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEPQ,aAAa,EAAG,UAASD,GAAI;IAFtB;EAF0B,CAAzB,CAAL,CAMJH,IANI,CAMChB,mBAND,CAAP;AAOD,CARD;;AAUA,SAASO,KAAT,EAAgBU,MAAhB,EAAwBC,SAAxB"},"metadata":{},"sourceType":"module"}